content_by_lua_block {
    local http = require "resty.http"
    local cjson = require "cjson"
    local io = require "io"
    local os = require "os"
    local upload = require "resty.upload"

    local CLAMAV_SCAN_PATH = os.getenv("CLAMAV_SCAN_PATH")
    local CLAMAV_HOST = os.getenv("CLAMAV_HOST")
    local CLAMAV_SERVICE_PORT = os.getenv("CLAMAV_SERVICE_PORT")
    local CLAMAV_FORWARD_ROUTE = os.getenv("CLAMAV_FORWARD_ROUTE")

    local function forward_original_request()
        ngx.req.read_body()
        local raw_body_content = ngx.req.get_body_data() or ""

        -- Forward to the specified route
        ngx.req.set_uri(CLAMAV_FORWARD_ROUTE, false)
        ngx.req.set_body_data(raw_body_content)
        ngx.exec(CLAMAV_FORWARD_ROUTE)
        return
    end

    local function generate_temp_filename()
        return CLAMAV_SCAN_PATH .. "/tempfile_" .. ngx.time() .. "_" .. math.random(1000, 9999)
    end

    local function exit_with_error(statuscode, result)
        ngx.status = statuscode
        ngx.say(cjson.encode({ status = "error", message = result }))
        return
    end

    local function cleanup(filesArray)
        for file_id, temp_filename in ipairs(filesArray) do
            os.remove(temp_filename)
        end
    end

    -- Only handle POST and PUT requests, forward others
    -- The others (GET, DELETE) should be small requests so the chance that the request was written to the disk is minimal
    if ngx.req.get_method() ~= "POST" and ngx.req.get_method() ~= "PUT" then
        forward_original_request()
        return
    end

    -- decode the multipart form data stuff...
    local chunk_size = 4096
    -- setting the third parameter to "true" preserves the body so that we can retrieve the original body later
    local form, err = upload:new(chunk_size, 512, true)
    if not form then
        exit_with_error(500, "Failed to initialize upload: " .. err)
        return
    end

    form:set_timeout(5000) -- 5 sec

    local files = {}
    local current_file
    local current_file_id = 0

    -- we loop through the multipart definition, pick out all files and write them to temporary filenames
    while true do
        local typ, res, err = form:read()
        if not typ then
            cleanup(files)
            exit_with_error(500,  "Failed to read form: " .. err)
            return
        end

        if typ == "header" then
            local name = res[1]
            if name == "Content-Disposition" then
                local filename = ngx.re.match(res[2], 'filename="(.*)"')
                if filename then
                    current_file_id = current_file_id + 1
                    files[current_file_id] = generate_temp_filename()
                    current_file = io.open(files[current_file_id], "wb")
                    if not current_file then
                        cleanup(files)
                        exit_with_error(500, "Failed to open file for writing")
                        return
                    end
                end
            end

        elseif typ == "body" then
            if current_file then
                current_file:write(res)
            end

        elseif typ == "part_end" then
            if current_file then
                current_file:close()
                current_file = nil
            end

        elseif typ == "eof" then
            break
        end
    end

    -- if no file was found we just forward the original request
    if current_file_id == 0 then
        forward_original_request()
        return
    end

    -- now let clamav scan all found files
    -- we return when the first file contains malware
    for file_id, temp_filename in ipairs(files) do
        local httpc = http.new()
        httpc:set_timeout(60000 * 3) -- timeout is 3 minutes for virus scanning
        local res, err = httpc:request_uri("http://" .. CLAMAV_HOST .. ":" .. CLAMAV_SERVICE_PORT .. "/scanFile?path=" .. temp_filename, {
            method = "GET",
            headers = {
                ["Content-Type"] = ngx.req.get_headers()["Content-Type"],
            }
        })

        if not res then
            cleanup(files)
            exit_with_error(500, "Failed to connect to virus scanner: " .. err)
            return
        end

    --[[
    if res then
            ngx.status = 200
            ngx.say(cjson.encode({ status = "error", message = "response from clamav: " .. res.body .. " code " ..res.status }))
            return
        end
    ]]

        -- decode the clamav response
        local status_code = res.status

        local ok, body = pcall(cjson.decode, res.body)
        if not ok then
            cleanup(files)
            exit_with_error(500, "Failed to decode response from virus scanner: " .. res.body)
            return
        end

        if status_code == 406 then
            cleanup(files)
            exit_with_error(406, "Virus detected: " .. body.Description)
            return
        end

        if status_code == 400 or status_code == 412 or status_code == 501 then
            cleanup(files)
            exit_with_error(500, "General error while scanning this file: " .. res.body)
            return
        end
    end

    -- remove temporary files (good case, no malware found)
    cleanup(files)

    -- retrieve the original body for forwarding
    ngx.req.read_body()
    local raw_body_content = ngx.req.get_body_data()

    if not raw_body_content then
        -- The request may have been written to disk as it's too large
        local nginx_body_tmp_file_name = ngx.req.get_body_file()
        if nginx_body_tmp_file_name then
            -- Read the original raw body content
            local raw_file = io.open(nginx_body_tmp_file_name, "rb")
            raw_body_content = raw_file:read("*all")
            raw_file:close()
        else
            exit_with_error(500, "Failed to read request body")
            return
        end
    end

    -- Forward to PHP-FCGI server
    ngx.req.set_uri(CLAMAV_FORWARD_ROUTE, false)
    ngx.req.set_method(ngx.HTTP_POST)
    ngx.req.set_body_data(raw_body_content)
    ngx.req.clear_header("Content-Length")
    ngx.req.set_header("Content-Length", #raw_body_content)
    ngx.exec(CLAMAV_FORWARD_ROUTE)

    return
}
