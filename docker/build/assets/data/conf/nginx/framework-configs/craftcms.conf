upstream phpfcgi {
  server ${UPSTREAM_SERVER};
}

# set cache: cache_zone, 128m memory, 1g disk, inactive 25h days, temp path is in the cache
fastcgi_cache_path /var/run/nginx-cache levels=1:2 keys_zone=cache_zone:384m inactive=25h max_size=1g use_temp_path=off;

include /data/conf/nginx/http-partials.d/*.conf;

# Sets a $real_scheme variable whose value is the scheme passed by the load
# balancer in X-Forwarded-Proto (if any), defaulting to $scheme.
# Similar to how the HttpRealIp module treats X-Forwarded-For.
map $http_x_forwarded_proto $real_scheme {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

server {
    listen 8080;
    server_name $hostname;
    root /app/web;

    index index.php index.html;

    charset utf-8;

    include /data/conf/nginx/ssl/ssl.conf;
    include /data/conf/nginx/security-headers.d/*.conf;
    include /data/conf/nginx/server-partials.d/*.conf;

    ###############
    ### Caching ###
    ###############

    # cache all by default (=0)
    set $no_cache 0;
    # default save to cache
    set $no_cache_save 0;
    # default cache key
    set $cache_key "$real_scheme$request_method$host$uri$is_args$args";

    # shared php-fpm configuration
    fastcgi_buffering       on;
    fastcgi_buffer_size     256k;
    fastcgi_buffers         128 256k;
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout    300;
    fastcgi_read_timeout    300;

    # Don't cache POST requests
    if ($request_method = POST)
    {
        set $no_cache 1;
        set $no_cache_save 1;
    }

    # Don't cache if the URL contains a 'token' query string
    if ($query_string ~* "token=([a-zA-Z0-9]+)") {
        set $no_cache 1;
        set $no_cache_save 1;
    }

    # Don't cache if the URL contains a 'cache=bypass' query string
    if ($query_string ~* "cache=bypass") {
        set $no_cache 1;
        set $no_cache_save 1;
    }

    # Don't cache BUT save if the URL contains a 'cache=refresh' query string
    if ($query_string = "cache=refresh") {
        set $no_cache 1;
        set $cache_key "$real_scheme$request_method$host$uri";
    }

    # set cache key
    fastcgi_cache_key $cache_key;

    ##################
    ### Conditions ###
    ##################

    # Issue a 301 Redirect for any URL with a trailing /
    rewrite ^/(.*)/$ $real_scheme://$host/$1 permanent;

    # Change // -> / for all URLs, so it works for our php location block, too
    merge_slashes off;
    rewrite (.*)//+(.*) $1/$2 permanent;

    ###################
    ### Compression ###
    ###################

    # Enable gzip compression.
    # Default: off
    gzip on;
    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    # Default: off
    gzip_vary on;
    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    # Default: 20
    gzip_min_length 1024;
    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header.
    # Default: off
    gzip_proxied any;

    # Compress all output labeled with one of the following MIME-types.
    # text/html is always compressed by gzip module.
    # Default: text/html
    gzip_types
      application/atom+xml
      application/javascript
      application/x-javascript
      application/json
      application/ld+json
      application/manifest+json
      application/rss+xml
      application/geo+json
      application/vnd.ms-fontobject
      application/x-web-app-manifest+json
      application/xhtml+xml
      application/xml
      application/rdf+xml
      font/otf
      application/wasm
      image/bmp
      image/svg+xml
      text/cache-manifest
      text/css
      text/javascript
      text/plain
      text/markdown
      text/vcard
      text/calendar
      text/vnd.rim.location.xloc
      text/vtt
      text/x-component
      text/x-cross-domain-policy
      text/xml;
    # Compression level (1-9).
    # 5 is a perfect compromise between size and CPU usage, offering about
    # 75% reduction for most ASCII files (almost identical to level 9).
    # Default: 1
    gzip_comp_level 5;

    gzip_disable "MSIE [1-6]\.";

    #################
    ### Locations ###
    #################

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        try_files $uri $uri/ @rewrites;
        allow all;
        log_not_found off;
        access_log off;
    }

    location = /version.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # Allow "Well-Known URIs" as per RFC 5785
    location ~* ^/.well-known/ {
      allow all;
    }

    # Block access to "hidden" files and directories whose names begin with a period
    location ~ (^|/)\. {
      return 403;
    }

    location ~ \..*/.*\.php$ {
      return 403;
    }

    # deny some known locations
    location ~ ^/(wp-admin|wp-login|xmlrpc|cronjstats\.php$) {
      return 403;
    }

    # Don't allow direct access to PHP files in the vendor directory
    location ~ /vendor/.*\.php$ {
      deny all;
      return 404;
    }

    # Media: images, icons, video, audio, HTC
    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp3|mp4|ogg|ogv|webm|htc|webp)$ {
      try_files $uri $uri/ @rewrites;
      expires 4h; # four hours
      log_not_found off;
      add_header Pragma public;
      add_header Cache-Control "public";
      include /data/conf/nginx/security-headers.d/*.conf;
    }

    # Special treatment of webpack generated hashed files (main-(hash).js|css)
    location ~* main-[0-9a-z]+\.(js|css)$ {
      try_files $uri $uri/ @rewrites;
      expires 1y; # one year
      log_not_found off;
      add_header Pragma public;
      add_header Cache-Control "public";
      include /data/conf/nginx/security-headers.d/*.conf;
    }

    location ~* \.(js|css)$ {
      try_files $uri $uri/ @rewrites;
      expires 1d; # one day
      log_not_found off;
      add_header Pragma public;
      add_header Cache-Control "public";
      include /data/conf/nginx/security-headers.d/*.conf;
    }

    # WebFonts
    location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
      try_files $uri $uri/ @rewrites;
      expires 1M; # one month
      log_not_found off;
      add_header Pragma public;
      add_header Cache-Control "public";
      include /data/conf/nginx/security-headers.d/*.conf;
    }

    # start special routing to @phpfpm_nocache handler for the following locations

    # must correspond to 'cpTrigger'
    location ^~ /cmsadm {
        try_files $uri $uri/ @phpfpm_nocache;
    }
    location ^~ /index.php/cmsadm {
        try_files $uri $uri/ @phpfpm_nocache;
    }
    # must correspond to 'resourceTrigger'
    location ^~ /cpresources {
        try_files $uri $uri/ @phpfpm_nocache;
    }
    # must correspond to 'actionTrigger'
    location ^~ /actions {
        try_files $uri $uri/ @phpfpm_nocache;
    }
    # our api location
    location ^~ /api/ {
        try_files $uri $uri/ @phpfpm_nocache;
    }
    # end special routing

    location / {
        try_files $uri $uri/ @rewrites;
    }

    location @rewrites {
        rewrite ^(/en|de|fr|es)?/(.*)$ $1/index.php?p=$2&$args? last;
    }

    location ~ [^/]\.php(/|$) {
        try_files $uri $uri/ /index.php?$query_string;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        include /etc/nginx/fastcgi_params;

        # Block httpoxy attacks. See https://httpoxy.org/.
        fastcgi_param HTTP_PROXY "";

        set $realip $remote_addr;
        if ($http_x_forwarded_for ~ "^(\d+\.\d+\.\d+\.\d+)") {
          set $realip $1;
        }

        fastcgi_param HOST                    $host;
        fastcgi_param REQUEST_SCHEME          $real_scheme;
        fastcgi_param HTTP_X_REAL_IP          $realip;
        fastcgi_param HTTP_X_FORWARDED_FOR    $proxy_add_x_forwarded_for;
        fastcgi_param HTTP_X_FORWARDED_PROTO  $real_scheme;
        fastcgi_param REMOTE_ADDR             $realip;
        fastcgi_param SCRIPT_FILENAME         $document_root/index.php;
        fastcgi_param PATH_INFO               $fastcgi_path_info;
        fastcgi_intercept_errors              on;
        fastcgi_pass                          phpfcgi;

        # Don't allow browser caching of dynamically generated content
        add_header          Last-Modified $date_gmt;
        add_header          Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        if_modified_since   off;
        expires             off;
        etag                off;

        # FastCGI Cache settings
        fastcgi_cache cache_zone;

        # Ignore and hide specific headers
        fastcgi_ignore_headers  Cache-Control Expires Set-Cookie;
        fastcgi_hide_header     Set-Cookie;

        # Default caching settings per HTTP return code/s; may be overridden by 'X-Accel-Expires' header by FastCGI
        fastcgi_cache_valid 200           1h;
        fastcgi_cache_valid 301 302 404   1d;

        # Allows starting a background subrequest to update an expired cache item, while a stale cached response is returned to the client.
        fastcgi_cache_background_update   on;
        # When enabled, only one request at a time will be allowed to populate a new cache element identified according to the fastcgi_cache_key directive
        fastcgi_cache_lock                on;
        # If the last request passed to the FastCGI server for populating a new cache element has not completed for the specified time, one more request may be passed to the FastCGI server.
        fastcgi_cache_lock_age            10s;
        # Sets a timeout for fastcgi_cache_lock. When the time expires, the request will be passed to the FastCGI server, however, the response will not be cached.
        fastcgi_cache_lock_timeout        15s;

        # Determines in which cases a stale cached response can be used when an error occurs during communication with the FastCGI server.
        fastcgi_cache_use_stale updating error timeout invalid_header http_500 http_503;

        # bypass and (optionally) safe cache content
        fastcgi_cache_bypass    $no_cache;
        fastcgi_no_cache        $no_cache_save;

        # adds a HTTP response header "X-Cache" returning HIT/MISS/BYPASS/EXPIRED for cache use status
        add_header X-Cache      $upstream_cache_status;

        include /data/conf/nginx/security-headers.d/*.conf;
    }

    location @phpfpm_nocache {
        fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
        include /etc/nginx/fastcgi_params;

        # Block httpoxy attacks. See https://httpoxy.org/.
        fastcgi_param HTTP_PROXY "";

        set $realip $remote_addr;
        if ($http_x_forwarded_for ~ "^(\d+\.\d+\.\d+\.\d+)") {
          set $realip $1;
        }

        fastcgi_param HOST                    $host;
        fastcgi_param REQUEST_SCHEME          $real_scheme;
        fastcgi_param HTTP_X_REAL_IP          $realip;
        fastcgi_param HTTP_X_FORWARDED_FOR    $proxy_add_x_forwarded_for;
        fastcgi_param HTTP_X_FORWARDED_PROTO  $real_scheme;
        fastcgi_param REMOTE_ADDR             $realip;
        fastcgi_param SCRIPT_FILENAME         $document_root/index.php;
        fastcgi_param PATH_INFO               $query_string;
        fastcgi_intercept_errors              on;
        fastcgi_pass                          phpfcgi;

        # Don't allow browser caching of dynamically generated content
        add_header          Last-Modified $date_gmt;
        add_header          Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        if_modified_since   off;
        expires             off;
        etag                off;

        # No FastCGI Cache
        fastcgi_cache_bypass  1;
        fastcgi_no_cache      1;

        # Only include the default headers here, NOT the project specific headers
        # the Content-Security-Policy especially blocks some Craft backend requests, e.g. in the Seomatic plugin (wants "unsafe-eval" in script-src)
        include /data/conf/nginx/security-headers.d/00-security-headers.conf;
    }
}
